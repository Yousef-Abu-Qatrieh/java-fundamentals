/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.example;

import java.util.*;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public static void main(String[] args) {

        roll(5);
        System.out.println("");

        int[] rr = {5, 4, 3, 5, 1, 6};
        System.out.println(containsDuplicates(rr));
        int[] gg = {1, 2, 3, 4, 5, 6};
        System.out.println(containsDuplicates(gg));

        int[] ss = {1, 5, 7, 8, 9, 6, 10};

        calculateAvg(ss);
        int aa[] = {44, 50, 30, 20, 80, 99, 78};
        calculateAvg(aa);

        int[][] weeklyMonthTemperatures = {{66, 64, 58, 65, 71, 57, 60}, {57, 65, 65, 70, 72, 65, 51}, {55, 54, 60, 53, 59, 57, 61}, {65, 56, 55, 52, 55, 62, 57}};
        System.out.println(Arrays.toString(new String[]{arrayArrays((weeklyMonthTemperatures)) + " smallest average array"}));
        System.out.println("****************************      analyzingWeatherData     *******************************");
        analyzingWeatherData(weeklyMonthTemperatures);

        ArrayList<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");
        System.out.println("****************************      Tallying Election     *******************************");
        String winner = tally(votes);
        System.out.println(winner + " received the most votes!");


    }

    public static int[] roll(int roll) {
        int[] values = new int[roll];


        for (int index = 0; index < values.length; index++) {
            int flip = (int) (Math.random() * 6 + 1);
            System.out.print(values[index] = flip);
            System.out.print(" ");

        }

        return values;

    }

    public static boolean containsDuplicates(int[] arr) {
        for (int index = 0; index < arr.length; index++) {

            for (int secondIndex = index + 1; secondIndex < arr.length; secondIndex++) {
                if (arr[index] == arr[secondIndex]) {
                    return true;
                }
            }
        }

        return false;

    }

    public static double calculateAvg(int[] arr) {
        double avg = 0;
        for (int index = 0; index < arr.length; index++) {

            avg += arr[index];

        }
        System.out.println(avg /= arr.length);
        return avg;
    }

    public static double arrayArrays(int[][] arr) {
        double min = Double.MAX_VALUE, max = Double.MIN_VALUE;
        double[] newArr = new double[arr.length];
        for (int index = 0; index < arr.length; index++) {
            newArr[index] = calculateAvg(arr[index]);


        }
        for (int index = 0; index < newArr.length; index++) {
            if (min > newArr[index]) {
                min = newArr[index];
            }
            if (max < newArr[index]) {
                max = newArr[index];
            }
        }

        return min;
    }

    public static int analyzingWeatherData(int[][] arr) {
        Set<Integer> setValues = new HashSet<>();
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        for (int index = 0; index < arr.length; index++) {
            for (int secondIndex = 0; secondIndex < arr[index].length; secondIndex++) {

                setValues.add(arr[index][secondIndex]);
            }

        }
//        System.out.println(setValues);
        for (int value : setValues) {
            if (min > value) {
                min = value;
            }
            if (max < value) {
                max = value;
            }
        }
        System.out.println("High: " + max);
        System.out.println("Low: " + min);

        for (int index = min; index < max; index++) {
            if (setValues.contains(index)) {
                continue;
            } else {

                System.out.println("Never saw temperature: " + index);
            }

        }
return max;

    }

    public static String tally(ArrayList<String> votes) {
        int countBush = 0;
        int countShrub = 0;
        int countHedge = 0;
        String winner;
        for (String vote : votes) {
            if (vote.equals("Bush")) {
                countBush++;
            } else if (vote.equals("Shrub")) {
                countShrub++;
            } else if (vote.equals("Hedge")) {
                countHedge++;
            }
        }
        if (countBush > countShrub && countBush > countHedge) {
            return winner = "Bush";
        } else if (countHedge > countBush && countHedge > countShrub) {
            return winner = "Hedge";
        } else if (countShrub > countBush && countShrub > countHedge) {
            return winner = "Shurb";
        } else {
            return "Unknown";
        }
    }
}